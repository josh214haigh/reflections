When would you want to use a remote repository rather than keeping all your work local?

Several reasons, the most obvious is to allow others to collaborate on your work using a central repo that they can all access.
Another is to allow you to easily work from several computers depending on where you are without transferring the files
across each time you change computer. The most basic reason is to give yourself a backup in case of computer breakdown or hard drive crashes.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You might be working on an alternative to the main branch that is on GitHub and not want to have changes forced on you when what you want to do is 
to create an alternative. Or you could save space by not downloading changes that are made to branches that you are not working on.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Branches are used to develop different features or versions of the code that you have access to. Clones are copies of repos, either locally or from a 
remote computer, such as with GitHub. Clones are used to copy repos from computer to computer, so that you have a common starting point.
Forks are essentially clones from a different GitHub account to your own GitHub account. Forks are used to get a copy
of someone else's work so you can try out new things that the original author may not want or accept.

What is the benefit of having a copy of the last known state of the remote stored locally?

If there are any further commits to both the local and remote versions, we have a common ancestor ready for us, to merge local changes with remote changes 
if required.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

It occurs to me that if Git and GitHub didn't exist, someone would need to create something nearly identical. Collaboration without them would probably involve
a lot of confusion. I would have one person in charge of the main branch with others communicating proposed changes to this person, which would then either be
accepted or rejected by them. We would still be able to use version control and compare differences between different versions, so much of the practicality of 
git would be available to us. There could still be an online copy of the most recent main branch for others to copy or download to work on. Git and GitHub just
make it easier.

